package services

import (
	"os"
	"path/filepath"
	"testing"
)

func TestGeminiService_GenerateDocumentation(t *testing.T) {
	// Create a temporary directory for testing
	tempDir, err := os.MkdirTemp("", "gemini-doc-test")
	if err != nil {
		t.Fatalf("Failed to create temp directory: %v", err)
	}
	defer os.RemoveAll(tempDir)

	// Create a test README.md file
	readmeContent := `# Test Project

This is a test project for documentation generation.

## Usage

Run the project with:

` + "```bash" + `
go run main.go
` + "```" + `

## Contributing

Please read CONTRIBUTING.md for details.
`
	readmePath := filepath.Join(tempDir, "README.md")
	if err := os.WriteFile(readmePath, []byte(readmeContent), 0644); err != nil {
		t.Fatalf("Failed to create README.md: %v", err)
	}

	// Test that GEMINI.md doesn't exist initially
	geminiPath := filepath.Join(tempDir, "GEMINI.md")
	if _, err := os.Stat(geminiPath); err == nil {
		t.Fatal("GEMINI.md should not exist initially")
	}

	// Create a simple mock service for testing
	mockService := &mockGeminiServiceForTest{}

	// Generate documentation
	err = mockService.GenerateDocumentation(tempDir)
	if err != nil {
		t.Fatalf("GenerateDocumentation failed: %v", err)
	}

	// Test that GEMINI.md exists after generation
	if _, err := os.Stat(geminiPath); err != nil {
		t.Fatal("GEMINI.md should exist after generation")
	}

	// Test that calling GenerateDocumentation again doesn't fail (should skip)
	err = mockService.GenerateDocumentation(tempDir)
	if err != nil {
		t.Fatalf("Second call to GenerateDocumentation failed: %v", err)
	}
}

// mockGeminiServiceForTest is a simple mock for testing
type mockGeminiServiceForTest struct{}

func (m *mockGeminiServiceForTest) GenerateDocumentation(repoDir string) error {
	// Check if GEMINI.md already exists
	geminiPath := filepath.Join(repoDir, "GEMINI.md")
	if _, err := os.Stat(geminiPath); err == nil {
		return nil // Already exists
	}

	// Create a mock GEMINI.md file
	content := `# GEMINI.md

This file was automatically generated by the Gemini AI service.

## Table of Contents
- [Getting Started](#getting-started)
- [Documentation](#documentation)

## Getting Started
- [README.md](./README.md) - Main project overview and setup instructions

## Documentation
- [Test Project](./README.md#test-project) - Overview of the test project
`
	return os.WriteFile(geminiPath, []byte(content), 0644)
}
